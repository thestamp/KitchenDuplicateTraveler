@using Traveler.Core.Models
@using Traveler.Wasm.Client.Models

<div class="traveler-container">
    @if (!string.IsNullOrEmpty(EventUrl))
    {
        <div class="event-header no-print">
            <MudPaper Class="pa-4 mb-4" Elevation="1">
                <div class="d-flex align-center justify-space-between">
                    <div>
                        <MudText Typo="Typo.h6" GutterBottom="false">@EventName</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@ClubName</MudText>
                    </div>
                    <div class="d-flex gap-2">
                        @if (!string.IsNullOrEmpty(PbnUrl))
                        {
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Secondary"
                                       StartIcon="@Icons.Material.Filled.Download"
                                       Href="@PbnUrl"
                                       Target="_blank"
                                       Download="tournament.pbn">
                                Download PBN
                            </MudButton>
                        }
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.OpenInNew"
                                   Href="@EventUrl"
                                   Target="_blank">
                            View on BridgeWebs
                        </MudButton>
                    </div>
                </div>
            </MudPaper>
        </div>
    }

    @if (Boards != null && Boards.Any())
    {
        <div class="boards-stack">
            @foreach (var board in Boards)
            {
                <BoardCard GameData="@board" />
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public List<GameData> Boards { get; set; } = new();

    [Parameter]
    public string? EventUrl { get; set; }

    [Parameter]
    public string? EventName { get; set; }

    [Parameter]
    public string? ClubName { get; set; }

    [Parameter]
    public string? PbnUrl { get; set; }
}

<style>
    .traveler-container {
        width: 100%;
    }

    .event-header {
        margin-bottom: 1rem;
    }

    .boards-stack {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    @@media print {
        .event-header {
            display: none;
        }

        .boards-stack {
            gap: 1rem;
        }

        /* Each board on its own line when printing */
        .boards-stack > * {
            page-break-inside: avoid;
        }
    }
</style>