@using Traveler.Core.Models

<MudPaper Class="board-card" Elevation="2">
    <!-- TOP ROW: Board Info -->
    <div class="info-row">
        <div class="info-item">
            <div class="info-label">BOARD</div>
            <div class="info-value">@GameData.GameModel.BoardNumber.ToString("D2")</div>
        </div>
        <div class="info-item">
            <div class="info-label">DEALER</div>
            <div class="info-value">@GameData.GameModel.Dealer</div>
        </div>
        <div class="info-item">
            <div class="info-label">VULNERABLE</div>
            <div class="info-value">@GameData.GameModel.Vulnerable</div>
        </div>
    </div>

    <!-- MIDDLE ROW: Hands (Visual Bridge Layout) -->
    <div class="hands-row">
        <div class="hands-bridge-layout">
            <!-- North (Top) -->
            @if (GameData.GameModel.PlayerHands.ContainsKey(GameModel.Player.North))
            {
                <div class="hand hand-north">
                    <div class="player-label">NORTH</div>
                    <div class="suits-vertical">
                        @foreach (var suit in FormatHandBySuit(GameData.GameModel.PlayerHands[GameModel.Player.North]))
                        {
                            <div class="suit-line">
                                <span class="suit-symbol @suit.SuitClass">@suit.Symbol</span>
                                <span class="suit-cards">@suit.Cards</span>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- West (Left) and East (Right) -->
            <div class="hands-horizontal">
                @if (GameData.GameModel.PlayerHands.ContainsKey(GameModel.Player.West))
                {
                    <div class="hand hand-west">
                        <div class="player-label">WEST</div>
                        <div class="suits-vertical">
                            @foreach (var suit in FormatHandBySuit(GameData.GameModel.PlayerHands[GameModel.Player.West]))
                            {
                                <div class="suit-line">
                                    <span class="suit-symbol @suit.SuitClass">@suit.Symbol</span>
                                    <span class="suit-cards">@suit.Cards</span>
                                </div>
                            }
                        </div>
                    </div>
                }

                <div class="center-space"></div>

                @if (GameData.GameModel.PlayerHands.ContainsKey(GameModel.Player.East))
                {
                    <div class="hand hand-east">
                        <div class="player-label">EAST</div>
                        <div class="suits-vertical">
                            @foreach (var suit in FormatHandBySuit(GameData.GameModel.PlayerHands[GameModel.Player.East]))
                            {
                                <div class="suit-line">
                                    <span class="suit-symbol @suit.SuitClass">@suit.Symbol</span>
                                    <span class="suit-cards">@suit.Cards</span>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <!-- South (Bottom) -->
            @if (GameData.GameModel.PlayerHands.ContainsKey(GameModel.Player.South))
            {
                <div class="hand hand-south">
                    <div class="player-label">SOUTH</div>
                    <div class="suits-vertical">
                        @foreach (var suit in FormatHandBySuit(GameData.GameModel.PlayerHands[GameModel.Player.South]))
                        {
                            <div class="suit-line">
                                <span class="suit-symbol @suit.SuitClass">@suit.Symbol</span>
                                <span class="suit-cards">@suit.Cards</span>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- BOTTOM ROW: Scoring -->
    @if (GameData.ScoreDetails.Any())
    {
        <div class="scoring-row">
            <div class="mp-labels-top">
                @foreach (var detail in GameData.ScoreDetails.OrderByDescending(d => d.MatchPoints))
                {
                    <div class="mp-label-ns">@detail.MatchPoints.ToString("F1")</div>
                }
            </div>
            
            <div class="score-line-container">
                <div class="score-line"></div>
                <div class="score-boxes">
                    @foreach (var detail in GameData.ScoreDetails.OrderByDescending(d => d.MatchPoints))
                    {
                        <div class="score-box @GetScoreBoxClass(detail)">
                            @if (detail.IsStoredScore && !string.IsNullOrEmpty(detail.Contract))
                            {
                                var isNS = IsNorthSouth(detail.Declarer);
                                <div class="contract-info @(isNS ? "contract-ns" : "contract-ew")">
                                    @detail.Contract @detail.Declarer
                                </div>
                            }
                            <div class="score-value">@FormatScoreValue(detail)</div>
                            @if (detail.IsStoredScore)
                            {
                                <div class="tricks-info">@detail.TricksMade</div>
                            }
                        </div>
                    }
                </div>
            </div>

            <div class="mp-labels-bottom">
                @foreach (var detail in GameData.ScoreDetails.OrderBy(d => d.EastWestMatchPoints))
                {
                    <div class="mp-label-ew">@detail.EastWestMatchPoints.ToString("F1")</div>
                }
            </div>
        </div>
    }
</MudPaper>

@code {
    [Parameter]
    public GameData GameData { get; set; } = new();

    private class SuitDisplay
    {
        public string Symbol { get; set; } = "";
        public string Cards { get; set; } = "";
        public string SuitClass { get; set; } = "";
    }

    private List<SuitDisplay> FormatHandBySuit(string handString)
    {
        var result = new List<SuitDisplay>();
        if (string.IsNullOrWhiteSpace(handString)) return result;
        
        var suits = handString.Split('.');
        if (suits.Length != 4) return result;

        result.Add(new SuitDisplay { Symbol = "♠", Cards = suits[0], SuitClass = "spades" });
        result.Add(new SuitDisplay { Symbol = "♥", Cards = suits[1], SuitClass = "hearts" });
        result.Add(new SuitDisplay { Symbol = "♦", Cards = suits[2], SuitClass = "diamonds" });
        result.Add(new SuitDisplay { Symbol = "♣", Cards = suits[3], SuitClass = "clubs" });

        return result;
    }

    private string FormatScoreValue(GameData.ScoreDetail detail)
    {
        return detail.IsStoredScore ? detail.Score.ToString() : "---";
    }

    private string GetScoreBoxClass(GameData.ScoreDetail detail)
    {
        if (!detail.IsStoredScore) return "score-box-empty";
        return detail.Score >= 0 ? "score-box-positive" : "score-box-negative";
    }

    private bool IsNorthSouth(string declarer)
    {
        return declarer?.ToUpper() == "N" || declarer?.ToUpper() == "S" || 
               declarer?.ToUpper() == "NORTH" || declarer?.ToUpper() == "SOUTH";
    }
}

<style>
    .board-card {
        padding: 1.5rem;
        font-family: Arial, Helvetica, sans-serif;
        background-color: #ffffff;
        color: #000000;
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        border: 4px solid #000000;
    }

    /* TOP ROW: Board Info */
    .info-row {
        display: flex;
        justify-content: space-around;
        align-items: center;
        border-bottom: 4px solid #000000;
        padding-bottom: 1rem;
        gap: 2rem;
    }

    .info-item {
        text-align: center;
        flex: 1;
    }

    .info-label {
        font-size: 0.9rem;
        font-weight: 700;
        color: #666666;
        margin-bottom: 0.25rem;
        letter-spacing: 0.5px;
    }

    .info-value {
        font-size: 2rem;
        font-weight: 900;
        color: #000000;
    }

    /* MIDDLE ROW: Bridge Hand Layout */
    .hands-row {
        border-bottom: 4px solid #000000;
        padding-bottom: 1.5rem;
    }

    .hands-bridge-layout {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }

    .hands-horizontal {
        display: flex;
        width: 100%;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
    }

    .hand {
        background-color: #f8f8f8;
        border: 3px solid #000000;
        border-radius: 8px;
        padding: 0.75rem 1rem;
        box-shadow: 2px 2px 0px #000000;
    }

    .hand-north,
    .hand-south {
        min-width: 280px;
    }

    .hand-west,
    .hand-east {
        flex: 1;
        max-width: 280px;
    }

    .center-space {
        flex: 0 0 60px;
    }

    .player-label {
        font-size: 1rem;
        font-weight: 900;
        color: #000000;
        margin-bottom: 0.5rem;
        text-align: center;
        border-bottom: 2px solid #000000;
        padding-bottom: 0.25rem;
    }

    .suits-vertical {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .suit-line {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1.1rem;
        line-height: 1.4;
    }

    .suit-symbol {
        font-size: 1.5rem;
        font-weight: 900;
        min-width: 30px;
        text-align: center;
    }

    .suit-symbol.spades {
        color: #000000;
    }

    .suit-symbol.hearts {
        color: #d32f2f;
    }

    .suit-symbol.diamonds {
        color: #d32f2f;
    }

    .suit-symbol.clubs {
        color: #000000;
    }

    .suit-cards {
        font-size: 1.1rem;
        font-weight: 600;
        letter-spacing: 0.5px;
    }

    /* BOTTOM ROW: Scoring */
    .scoring-row {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .mp-labels-top,
    .mp-labels-bottom {
        display: flex;
        justify-content: space-between;
        padding: 0 10px;
    }

    .mp-label-ns,
    .mp-label-ew {
        font-size: 1.2rem;
        font-weight: 900;
        color: #000000;
        min-width: 60px;
        text-align: center;
    }

    .score-line-container {
        position: relative;
        padding: 10px 0;
    }

    .score-line {
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 6px;
        background-color: #000000;
        transform: translateY(-50%);
        z-index: 0;
    }

    .score-boxes {
        position: relative;
        display: flex;
        justify-content: space-between;
        z-index: 1;
        gap: 8px;
    }

    .score-box {
        flex: 1;
        min-width: 60px;
        min-height: 100px;
        border: 4px solid #000000;
        background-color: #ffffff;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 8px 4px;
        position: relative;
        box-shadow: 3px 3px 0px #000000;
    }

    .score-box-positive {
        background-color: #ffffff;
    }

    .score-box-negative {
        background-color: #f0f0f0;
    }

    .score-box-empty {
        background-color: #e8e8e8;
        border-style: dashed;
    }

    .contract-info {
        font-size: 0.75rem;
        font-weight: 700;
        color: #000000;
        text-align: center;
        line-height: 1.2;
        position: absolute;
        width: 100%;
        padding: 0 2px;
    }

    .contract-ns {
        top: 4px;
    }

    .contract-ew {
        bottom: 4px;
    }

    .score-value {
        font-size: 1.8rem;
        font-weight: 900;
        color: #000000;
        text-align: center;
        line-height: 1;
    }

    .tricks-info {
        font-size: 0.7rem;
        font-weight: 600;
        color: #333333;
        margin-top: 2px;
    }

    @@media print {
        .board-card {
            padding: 1rem;
            box-shadow: none !important;
            border: 3px solid #000000;
            page-break-inside: avoid;
            gap: 1rem;
        }

        .info-value {
            font-size: 1.6rem;
        }

        .hand {
            padding: 0.5rem 0.75rem;
        }

        .score-box {
            min-height: 80px;
            border-width: 3px;
        }

        .score-value {
            font-size: 1.5rem;
        }

        .mp-label-ns,
        .mp-label-ew {
            font-size: 1rem;
        }

        .score-line {
            height: 4px;
        }
    }
</style>