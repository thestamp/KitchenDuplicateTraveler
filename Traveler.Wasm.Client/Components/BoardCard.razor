@using Traveler.Core.Models

<MudPaper Class="board-card" Elevation="2">
    <!-- TOP ROW: Board Info - Inline Format -->
    <div class="info-row-inline">
        <span class="info-inline"><strong>Board:</strong> @GameData.GameModel.BoardNumber.ToString("D2")</span>
        <span class="info-separator">|</span>
        <span class="info-inline"><strong>Dealer:</strong> @GameData.GameModel.Dealer</span>
        <span class="info-separator">|</span>
        <span class="info-inline"><strong>Vulnerable:</strong> @GameData.GameModel.Vulnerable</span>
    </div>

    <!-- NORTH/SOUTH HANDS ROW -->
    <div class="hands-row hands-ns">
        <div class="hands-compact-layout">
            @if (GameData.GameModel.PlayerHands.ContainsKey(GameModel.Player.North))
            {
                <div class="hand hand-compact">
                    <div class="player-label-compact">N</div>
                    <div class="suits-compact">
                        @foreach (var suit in FormatHandBySuit(GameData.GameModel.PlayerHands[GameModel.Player.North]))
                        {
                            <span class="suit-symbol-compact @suit.SuitClass">@suit.Symbol</span>
                            <span class="suit-cards-compact">@suit.Cards</span>
                        }
                    </div>
                </div>
            }

            @if (GameData.GameModel.PlayerHands.ContainsKey(GameModel.Player.South))
            {
                <div class="hand hand-compact">
                    <div class="player-label-compact">S</div>
                    <div class="suits-compact">
                        @foreach (var suit in FormatHandBySuit(GameData.GameModel.PlayerHands[GameModel.Player.South]))
                        {
                            <span class="suit-symbol-compact @suit.SuitClass">@suit.Symbol</span>
                            <span class="suit-cards-compact">@suit.Cards</span>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- SCORING ROW -->
    @if (GameData.ScoreDetails.Any())
    {
        <div class="scoring-row">
            <!-- Top labels: N/S Match Points -->
            <div class="mp-labels-top">
                @foreach (var detail in GameData.ScoreDetails.OrderByDescending(d => d.MatchPoints))
                {
                    <div class="mp-label-container">
                        <div class="mp-label-ns">@detail.MatchPoints.ToString("0.#")</div>
                    </div>
                }
            </div>

            <!-- Score boxes with line -->
            <div class="score-line-container">
                <div class="score-line"></div>
                <div class="score-boxes">
                    @foreach (var detail in GameData.ScoreDetails.OrderByDescending(d => d.MatchPoints))
                    {
                        <div class="score-box @GetScoreBoxClass(detail)">
                            @if (detail.IsStoredScore && !string.IsNullOrEmpty(detail.Contract))
                            {
                                var contractDisplay = FormatContractDisplay(detail);
                                
                                @if (detail.Score > 0)
                                {
                                    <!-- N/S won points - both at TOP -->
                                    <div class="score-group score-group-top">
                                        <div class="score-display">
                                            @detail.Score
                                        </div>
                                        <div class="contract-inline">
                                            @((MarkupString)contractDisplay)
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <!-- E/W won points - both at BOTTOM -->
                                    <div class="score-group score-group-bottom">
                                        <div class="contract-inline">
                                            @((MarkupString)contractDisplay)
                                        </div>
                                        <div class="score-display">
                                            @Math.Abs(detail.Score)
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- Bottom labels: E/W Match Points -->
            <div class="mp-labels-bottom">
                @foreach (var detail in GameData.ScoreDetails.OrderBy(d => d.EastWestMatchPoints))
                {
                    <div class="mp-label-container">
                        <div class="mp-label-ew">@detail.EastWestMatchPoints.ToString("0.#")</div>
                        @if (detail.IsStoredScore && detail.TablesWithScore > 1)
                        {
                            <div class="tables-count">(@detail.TablesWithScore)</div>
                        }
                    </div>
                }
            </div>
        </div>
    }

    <!-- EAST/WEST HANDS ROW -->
    <div class="hands-row hands-ew">
        <div class="hands-compact-layout">
            @if (GameData.GameModel.PlayerHands.ContainsKey(GameModel.Player.East))
            {
                <div class="hand hand-compact">
                    <div class="player-label-compact">E</div>
                    <div class="suits-compact">
                        @foreach (var suit in FormatHandBySuit(GameData.GameModel.PlayerHands[GameModel.Player.East]))
                        {
                            <span class="suit-symbol-compact @suit.SuitClass">@suit.Symbol</span>
                            <span class="suit-cards-compact">@suit.Cards</span>
                        }
                    </div>
                </div>
            }

            @if (GameData.GameModel.PlayerHands.ContainsKey(GameModel.Player.West))
            {
                <div class="hand hand-compact">
                    <div class="player-label-compact">W</div>
                    <div class="suits-compact">
                        @foreach (var suit in FormatHandBySuit(GameData.GameModel.PlayerHands[GameModel.Player.West]))
                        {
                            <span class="suit-symbol-compact @suit.SuitClass">@suit.Symbol</span>
                            <span class="suit-cards-compact">@suit.Cards</span>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</MudPaper>

@code {
    [Parameter]
    public GameData GameData { get; set; } = new();

    private class SuitDisplay
    {
        public string Symbol { get; set; } = "";
        public string Cards { get; set; } = "";
        public string SuitClass { get; set; } = "";
    }

    private class ContractResultDisplay
    {
        public string Symbol { get; set; } = "";
        public string CssClass { get; set; } = "";
    }

    private List<SuitDisplay> FormatHandBySuit(string handString)
    {
        var result = new List<SuitDisplay>();
        if (string.IsNullOrWhiteSpace(handString)) return result;

        var suits = handString.Split('.');
        if (suits.Length != 4) return result;

        result.Add(new SuitDisplay { Symbol = "♠", Cards = suits[0], SuitClass = "spades" });
        result.Add(new SuitDisplay { Symbol = "♥", Cards = suits[1], SuitClass = "hearts" });
        result.Add(new SuitDisplay { Symbol = "♦", Cards = suits[2], SuitClass = "diamonds" });
        result.Add(new SuitDisplay { Symbol = "♣", Cards = suits[3], SuitClass = "clubs" });

        return result;
    }

    private string FormatContractDisplay(GameData.ScoreDetail detail)
    {
        if (string.IsNullOrEmpty(detail.Contract))
            return "";

        var contract = detail.Contract;
        var level = contract.Substring(0, 1);
        var suit = contract.Length > 1 ? contract[1].ToString().ToUpper() : "";
        var doubled = "";
        
        // Check for doubled/redoubled (make lowercase)
        if (contract.Contains("XX", StringComparison.OrdinalIgnoreCase))
            doubled = "xx";
        else if (contract.Contains("X", StringComparison.OrdinalIgnoreCase))
            doubled = "x";

        // Convert suit to symbol with larger font
        var suitSymbol = suit switch
        {
            "C" => "<span class=\"suit-symbol-contract clubs\">♣</span>",
            "D" => "<span class=\"suit-symbol-contract diamonds\">♦</span>",
            "H" => "<span class=\"suit-symbol-contract hearts\">♥</span>",
            "S" => "<span class=\"suit-symbol-contract spades\">♠</span>",
            "N" => "N", // Notrump as "N"
            _ => suit
        };

        var formattedContract = $"{level}{suitSymbol}{doubled}";
        var declarer = detail.Declarer;
        
        // Calculate result display
        var resultDisplay = GetResultDisplay(detail);
        
        return $"<span class=\"contract-compact\">{formattedContract} {declarer} {resultDisplay}</span>";
    }

    private string GetResultDisplay(GameData.ScoreDetail detail)
    {
        var isNS = IsNorthSouth(detail.Declarer);
        var scoreMadeContract = (isNS && detail.Score > 0) || (!isNS && detail.Score < 0);

        // Parse the contract to get level
        var contractLevel = int.Parse(detail.Contract.Substring(0, 1));
        var tricksNeeded = 6 + contractLevel;
        var tricksDifference = detail.TricksMade - tricksNeeded;

        if (tricksDifference == 0)
        {
            return "<span class=\"result-made\">✓</span>";
        }
        else if (tricksDifference > 0)
        {
            return $"<span class=\"result-made\">+{tricksDifference}</span>";
        }
        else
        {
            return $"<span class=\"result-defeated\">{tricksDifference}</span>";
        }
    }

    private ContractResultDisplay GetContractResult(GameData.ScoreDetail detail)
    {
        if (!detail.IsStoredScore)
            return new ContractResultDisplay { Symbol = "", CssClass = "" };

        var isNS = IsNorthSouth(detail.Declarer);
        var scoreMadeContract = (isNS && detail.Score > 0) || (!isNS && detail.Score < 0);

        if (scoreMadeContract)
        {
            return new ContractResultDisplay { Symbol = "✓", CssClass = "result-made" };
        }
        else
        {
            return new ContractResultDisplay { Symbol = "✗", CssClass = "result-defeated" };
        }
    }

    private string GetScoreBoxClass(GameData.ScoreDetail detail)
    {
        if (!detail.IsStoredScore) return "score-box-empty";
        return detail.Score >= 0 ? "score-box-positive" : "score-box-negative";
    }

    private bool IsNorthSouth(string declarer)
    {
        return declarer?.ToUpper() == "N" || declarer?.ToUpper() == "S" ||
               declarer?.ToUpper() == "NORTH" || declarer?.ToUpper() == "SOUTH";
    }
}

<style>
    .board-card {
        padding: 0.8rem;
        font-family: Arial, Helvetica, sans-serif;
        background-color: #ffffff;
        color: #000000;
        display: flex;
        flex-direction: column;
        gap: 0.6rem;
        border: 3px solid #000000;
        margin-bottom: 0.8rem;
    }

    /* TOP ROW: Inline Board Info */
    .info-row-inline {
        display: flex;
        align-items: center;
        gap: 1rem;
        border-bottom: 2px solid #000000;
        padding-bottom: 0.4rem;
        flex-wrap: wrap;
    }

    .info-inline {
        font-size: 1rem;
        font-weight: 600;
        color: #000000;
    }

        .info-inline strong {
            font-weight: 900;
        }

    .info-separator {
        font-size: 1rem;
        font-weight: 700;
        color: #666666;
    }

    /* HANDS ROW: Compact Bridge Hand Layout */
    .hands-row {
        padding-bottom: 0.4rem;
    }

    .hands-ns {
        border-bottom: 2px solid #000000;
    }

    .hands-ew {
        border-top: 2px solid #000000;
        padding-top: 0.4rem;
        padding-bottom: 0;
    }

    .hands-compact-layout {
        display: flex;
        gap: 0.8rem;
        justify-content: center;
        flex-wrap: nowrap;
    }

    .hand-compact {
        flex: 0 1 auto;
        background-color: #f8f8f8;
        border: 2px solid #000000;
        border-radius: 4px;
        padding: 0.35rem 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.4rem;
        min-width: 0;
    }

    .player-label-compact {
        font-size: 1rem;
        font-weight: 900;
        color: #000000;
        min-width: 16px;
        text-align: center;
        flex-shrink: 0;
    }

    .suits-compact {
        display: flex;
        gap: 0.35rem;
        flex-wrap: wrap;
        align-items: center;
        flex: 1;
        min-width: 0;
    }

    .suit-symbol-compact {
        font-size: 1.05rem;
        font-weight: 900;
        flex-shrink: 0;
    }

        .suit-symbol-compact.spades {
            color: #000000;
        }

        .suit-symbol-compact.hearts {
            color: #d32f2f;
        }

        .suit-symbol-compact.diamonds {
            color: #d32f2f;
        }

        .suit-symbol-compact.clubs {
            color: #000000;
        }

    .suit-cards-compact {
        font-size: 0.9rem;
        font-weight: 700;
        letter-spacing: 0.2px;
        margin-right: 0.25rem;
    }

    /* SCORING ROW */
    .scoring-row {
        display: flex;
        flex-direction: column;
        gap: 0.35rem;
    }

    .mp-labels-top,
    .mp-labels-bottom {
        display: flex;
        justify-content: space-between;
        gap: 5px;
    }

    .mp-label-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1px;
    }

    .mp-label-ns,
    .mp-label-ew {
        font-size: 1rem;
        font-weight: 900;
        color: #000000;
        text-align: center;
    }

    .tables-count {
        font-size: 0.6rem;
        font-weight: 700;
        color: #666666;
        text-align: center;
    }

    .score-line-container {
        position: relative;
        padding: 7px 0;
        display: flex;
        align-items: center;
    }

    .score-line {
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 4px;
        background-color: #000000;
        transform: translateY(-50%);
        z-index: 0;
    }

    .score-boxes {
        position: relative;
        display: flex;
        justify-content: space-between;
        z-index: 1;
        gap: 5px;
        flex: 1;
        width: 100%;
    }

    .score-box {
        flex: 1;
        min-width: 45px;
        min-height: 90px;
        border: 2px solid #000000;
        background-color: #ffffff;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        padding: 6px 3px;
        position: relative;
        box-shadow: 2px 2px 0px #000000;
    }

    .score-box-positive {
        background-color: #ffffff;
    }

    .score-box-negative {
        background-color: #f0f0f0;
    }

    /* Empty boxes have no border or background */
    .score-box-empty {
        background-color: transparent;
        border: none;
        box-shadow: none;
    }

    /* Score group - groups score and contract together */
    .score-group {
        display: flex;
        flex-direction: column;
        gap: 2px;
        align-items: center;
        width: 100%;
    }

    .score-group-top {
        /* Stays at top naturally */
    }

    .score-group-bottom {
        /* Push to bottom */
        margin-top: auto;
    }

    .score-display {
        font-size: 1.2rem;
        font-weight: 900;
        color: #000000;
        text-align: center;
        line-height: 1;
        width: 100%;
    }

    .contract-inline {
        font-size: 0.75rem;
        font-weight: 700;
        color: #000000;
        text-align: center;
        line-height: 1.2;
        white-space: nowrap;
        width: 100%;
    }

    .contract-compact {
        display: inline;
    }

    /* Larger suit symbols in contracts */
    .suit-symbol-contract {
        font-size: 1.1em;
        font-weight: 900;
        line-height: 1;
    }

    .suit-symbol-contract.spades {
        color: #000000;
    }

    .suit-symbol-contract.hearts {
        color: #d32f2f;
    }

    .suit-symbol-contract.diamonds {
        color: #d32f2f;
    }

    .suit-symbol-contract.clubs {
        color: #000000;
    }

    .contract-compact .result-made {
        color: #2e7d32;
        font-weight: 900;
    }

    .contract-compact .result-defeated {
        color: #c62828;
        font-weight: 900;
    }

    @@media print {
        @@page {
            size: landscape;
            margin: 0.4in;
        }

        .board-card {
            padding: 0.4rem;
            box-shadow: none !important;
            border: 2px solid #000000;
            page-break-inside: avoid;
            gap: 0.35rem;
            margin-bottom: 0.5rem;
            max-height: 3.2in;
        }

        .info-row-inline {
            padding-bottom: 0.25rem;
            border-bottom-width: 2px;
            font-size: 0.85rem;
        }

        .info-inline {
            font-size: 0.85rem;
        }

        .hands-row {
            padding-bottom: 0.3rem;
        }

        .hands-ns {
            border-bottom-width: 2px;
        }

        .hands-ew {
            border-top-width: 2px;
            padding-top: 0.3rem;
        }

        .hand-compact {
            padding: 0.25rem 0.4rem;
            border-width: 1.5px;
            gap: 0.3rem;
        }

        .player-label-compact {
            font-size: 0.9rem;
            min-width: 14px;
        }

        .suit-symbol-compact {
            font-size: 0.95rem;
        }

        .suit-cards-compact {
            font-size: 0.8rem;
        }

        .score-box {
            min-height: 80px;
            border-width: 1.5px;
            min-width: 38px;
            padding: 5px 2px;
        }

        .score-group {
            gap: 1px;
        }

        .score-display {
            font-size: 1.1rem;
        }

        .contract-inline {
            font-size: 0.65rem;
        }

        .suit-symbol-contract {
            font-size: 1.1em;
        }

        .mp-label-ns,
        .mp-label-ew {
            font-size: 0.9rem;
        }

        .tables-count {
            font-size: 0.55rem;
        }

        .score-line {
            height: 3px;
        }
    }
</style>