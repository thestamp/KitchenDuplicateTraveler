@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using Traveler.Wasm.Client.Services
@using Traveler.Wasm.Client.Components
@using Traveler.Wasm.Client.Models
@using Traveler.Core.Models
@inject TravelerService TravelerService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Kitchen Duplicate Traveler</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (!_showResults)
    {
        <MudPaper Class="pa-6" Elevation="3">
            <div class="d-flex align-center mb-2">
                <MudText Typo="Typo.h3" GutterBottom="false">Kitchen Duplicate Traveler</MudText>
            </div>
            <div class="d-flex align-center mb-4">
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mr-2">
                    by Jeff Lefebvre
                </MudText>
                <MudLink Href="https://github.com/thestamp/KitchenDuplicateTraveler"
                         Target="_blank"
                         Typo="Typo.body2"
                         Class="mr-2">
                    <MudIcon Icon="@Icons.Custom.Brands.GitHub" Size="Size.Small" Class="mr-1" />
                    GitHub
                </MudLink>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mr-1">•</MudText>
                <MudLink Href="https://github.com/thestamp/KitchenDuplicateTraveler#usage-instructions"
                         Target="_blank"
                         Typo="Typo.body2">
                    <MudIcon Icon="@Icons.Material.Filled.Help" Size="Size.Small" Class="mr-1" />
                    Usage Instructions
                </MudLink>
            </div>
            <MudText Typo="Typo.body1" Class="mb-4">
                Upload a PBN file or paste a URL to generate duplicate bridge traveler sheets with match points calculations.
            </MudText>

            <MudDivider Class="mb-4" />

            <MudText Typo="Typo.h6" GutterBottom="true">Option 1: Load from BridgeWebs</MudText>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudDownload"
                       OnClick="HandleLoadBridgeWebsTournaments"
                       Disabled="@_processing">
                Load Latest Tournaments
            </MudButton>

            <MudDivider Class="my-4" />

            <MudText Typo="Typo.h6" GutterBottom="true">Option 2: Upload PBN File</MudText>
            <MudFileUpload T="IBrowserFile" FilesChanged="HandleFileSelected" Accept=".pbn">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               Disabled="@_processing">
                        Upload PBN File
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>

            @if (_selectedFileName != null)
            {
                <MudText Typo="Typo.body2" Class="mt-2">
                    Selected: @_selectedFileName
                </MudText>
            }

            <MudDivider Class="my-4" />

            <MudText Typo="Typo.h6" GutterBottom="true">Option 3: Download from URL</MudText>
            <MudTextField @bind-Value="_pbnUrl"
                          Label="PBN File URL"
                          Variant="Variant.Outlined"
                          HelperText="Enter the URL of a PBN file"
                          Disabled="@_processing"
                          Immediate="true" />

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Download"
                       OnClick="HandleUrlDownload"
                       Class="mt-2"
                       Disabled="@(string.IsNullOrWhiteSpace(_pbnUrl) || _processing)">
                Download and Process
            </MudButton>

            @if (_processing)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-4" />
                <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-2">
                    @_processingMessage
                </MudText>
            }

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-4" CloseIconClicked="ClearError" ShowCloseIcon="true">
                    <div>
                        @_errorMessage
                        @if (!string.IsNullOrEmpty(_troubleshootUrl))
                        {
                            <div class="mt-2">
                                <MudLink Href="@_troubleshootUrl" Target="_blank" Color="Color.Error" Underline="Underline.Always">
                                    <MudIcon Icon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" Class="mr-1" />
                                    Click here to view the PBN file directly on BridgeWebs
                                </MudLink>
                            </div>
                        }
                    </div>
                </MudAlert>
            }
        </MudPaper>

        <MudPaper Class="pa-4 mt-4" Elevation="2">
            <MudText Typo="Typo.h6" GutterBottom="true">About This Tool</MudText>
            <MudText Typo="Typo.body2" Class="mb-2">
                Kitchen Duplicate Traveler helps bridge players analyze tournament results. Upload a PBN (Portable Bridge Notation) file to:
            </MudText>

            <MudText Typo="Typo.body2" Class="mt-3">
                <MudIcon Icon="@Icons.Material.Filled.Help" Size="Size.Small" Class="mr-1" />
                Need help? Check out our
                <MudLink Href="https://github.com/thestamp/KitchenDuplicateTraveler#usage-instructions" Target="_blank">
                    step-by-step usage instructions
                </MudLink>.
            </MudText>
        </MudPaper>
    }
    else
    {
        <MudPaper Class="pa-4 mb-4 no-print" Elevation="2">
            <div class="d-flex justify-space-between align-center">
                <div class="d-flex align-center">
                    <MudText Typo="Typo.h5">Traveler Results (@_boardData.Count boards)</MudText>
                </div>
                <div>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Print"
                               OnClick="PrintResults"
                               Class="mr-2">
                        Print
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Secondary"
                               StartIcon="@Icons.Material.Filled.ArrowBack"
                               OnClick="GoBack">
                        Upload Another File
                    </MudButton>
                </div>
            </div>
        </MudPaper>

        <div class="print-container">
            <TravelerDisplay Boards="@_boardData"
                             EventUrl="@_selectedTournament?.GetEventUrl()"
                             EventName="@_selectedTournament?.EventName"
                             ClubName="@_selectedTournament?.ClubName" />
        </div>
    }
</MudContainer>

@code {
    private bool _processing = false;
    private bool _showResults = false;
    private string? _selectedFileName;
    private string? _pbnUrl;
    private string? _errorMessage;
    private string? _troubleshootUrl;
    private string _processingMessage = "Processing...";
    private List<GameData> _boardData = new();
    private BridgeWebsTournament? _selectedTournament;

    private void ClearError()
    {
        _errorMessage = null;
        _troubleshootUrl = null;
    }

    private async Task HandleLoadBridgeWebsTournaments()
    {
        _errorMessage = null;
        _troubleshootUrl = null;
        _processing = true;
        _processingMessage = "Fetching latest tournaments...";
        StateHasChanged();

        try
        {
            var tournaments = await TravelerService.FetchBridgeWebsTournamentsAsync();

            if (tournaments.Count == 0)
            {
                _errorMessage = "No tournaments with results found.";
                Snackbar.Add(_errorMessage, Severity.Warning);
                return;
            }

            // Show tournament selection dialog
            var parameters = new DialogParameters<TournamentSelectionDialog>
            {
                { x => x.Tournaments, tournaments }
            };

            var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true,
                BackdropClick = false
            };

            var dialog = await DialogService.ShowAsync<TournamentSelectionDialog>(
                "Select Tournament",
                parameters,
                options);

            var result = await dialog.Result;

            if (!result.Canceled && result.Data is BridgeWebsTournament selectedTournament)
            {
                _selectedTournament = selectedTournament;
                _processingMessage = $"Loading {selectedTournament.ClubName}...";
                StateHasChanged();

                var pbnUrl = selectedTournament.GetPbnUrl();
                _boardData = await TravelerService.ProcessPbnFromUrlAsync(pbnUrl);
                _showResults = true;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading tournament: {ex.Message}";

            // Provide troubleshooting link if we have a selected tournament
            if (_selectedTournament != null)
            {
                _troubleshootUrl = _selectedTournament.GetPbnUrl();
            }

            Snackbar.Add(_errorMessage, Severity.Error);
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }

    private async Task HandleFileSelected(IBrowserFile file)
    {
        _errorMessage = null;
        _troubleshootUrl = null;
        _processing = true;
        _processingMessage = "Processing PBN file...";
        _selectedFileName = file.Name;
        _selectedTournament = null; // Clear tournament info when uploading file
        StateHasChanged();

        try
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB max
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();

            _boardData = await TravelerService.ProcessPbnContentAsync(content);
            _showResults = true;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error processing file: {ex.Message}";
            Snackbar.Add(_errorMessage, Severity.Error);
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }

    private async Task HandleUrlDownload()
    {
        _errorMessage = null;
        _troubleshootUrl = null;
        _processing = true;
        _processingMessage = "Downloading PBN file...";
        _selectedTournament = null; // Clear tournament info when using URL
        StateHasChanged();

        try
        {
            _boardData = await TravelerService.ProcessPbnFromUrlAsync(_pbnUrl!);
            _showResults = true;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error downloading/processing file: {ex.Message}";
            _troubleshootUrl = _pbnUrl; // Provide the URL for troubleshooting
            Snackbar.Add(_errorMessage, Severity.Error);
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }

    private async Task PrintResults()
    {
        // Trigger browser print dialog
        await JSRuntime.InvokeVoidAsync("window.print");
    }

    private void GoBack()
    {
        _showResults = false;
        _selectedFileName = null;
        _pbnUrl = null;
        _errorMessage = null;
        _troubleshootUrl = null;
        _boardData = new();
        _selectedTournament = null;
    }
}